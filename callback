<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quest Todo - Authentication</title>
    <style>
        body {
            font-family: system-ui, -apple-system, sans-serif;
            margin: 0;
            padding: 20px;
            background: #f3f4f6;
            color: #1f2937;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            text-align: center;
        }
        
        .container {
            max-width: 500px;
            background: white;
            padding: 2rem;
            border-radius: 1rem;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        
        h1 {
            margin-top: 0;
            color: #4f46e5;
        }
        
        .status {
            margin: 2rem 0;
            padding: 1rem;
            border-radius: 0.5rem;
        }
        
        .success {
            background: #f0fdf4;
            color: #16a34a;
            border: 1px solid #22c55e;
        }
        
        .error {
            background: #fef2f2;
            color: #dc2626;
            border: 1px solid #ef4444;
        }
        
        button {
            background: #4f46e5;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 0.25rem;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        button:hover {
            opacity: 0.9;
            transform: translateY(-1px);
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Quest Todo Authentication</h1>
        <div id="status" class="status">
            Processing authentication...
        </div>
        <button id="continueButton" style="display: none;" onclick="redirectToApp()">Continue to App</button>
    </div>

    <script>
        // GitHub OAuth configuration
        // Replace these with your actual GitHub App credentials
        const clientId = 'YOUR_GITHUB_CLIENT_ID';
        // We use a proxy server to avoid exposing your client secret in client-side code
        const proxyUrl = 'https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token';
        
        // Function to parse URL parameters
        function getUrlParameter(name) {
            name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
            const regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
            const results = regex.exec(location.search);
            return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
        }
        
        // Function to redirect back to the main app
        function redirectToApp() {
            // Redirect to your main app page
            const mainAppUrl = '../index.html'; // Adjust this path to match your structure
            window.location.href = mainAppUrl;
        }
        
        // Function to display status messages
        function updateStatus(message, type) {
            const statusElement = document.getElementById('status');
            statusElement.innerHTML = message;
            statusElement.className = 'status ' + type;
            
            if (type === 'success') {
                document.getElementById('continueButton').style.display = 'inline-block';
            }
        }
        
        // Function to exchange the code for an access token
        async function exchangeCodeForToken(code) {
            try {
                // For GitHub Pages, we need to use a proxy server to avoid CORS issues
                // In a real app, you'd handle this server-side
                const response = await fetch(proxyUrl, {
                    method: 'POST',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                        'Origin': window.location.origin
                    },
                    body: JSON.stringify({
                        client_id: clientId,
                        // Note: In a production app, never expose your client_secret on the client side
                        // This is only for demo purposes - you should use a server-side component
                        client_secret: 'YOUR_GITHUB_CLIENT_SECRET', 
                        code: code,
                        redirect_uri: window.location.href.split('?')[0]
                    })
                });
                
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                
                const data = await response.json();
                
                if (data.access_token) {
                    // Store the token securely
                    localStorage.setItem('githubToken', data.access_token);
                    
                    // Show success message
                    updateStatus('Authentication successful! You can now use GitHub to store your progress.', 'success');
                    
                    // Test the token by getting user info
                    const userResponse = await fetch('https://api.github.com/user', {
                        headers: {
                            'Authorization': `token ${data.access_token}`
                        }
                    });
                    
                    if (userResponse.ok) {
                        const userData = await userResponse.json();
                        console.log('Authenticated as:', userData.login);
                    }
                } else if (data.error) {
                    updateStatus(`Error: ${data.error_description || data.error}`, 'error');
                }
            } catch (error) {
                console.error('Authentication error:', error);
                updateStatus(`Authentication failed: ${error.message}`, 'error');
            }
        }
        
        // Main execution
        document.addEventListener('DOMContentLoaded', function() {
            // Check if we have a code parameter in the URL
            const code = getUrlParameter('code');
            const error = getUrlParameter('error');
            
            if (error) {
                // Handle authentication error
                updateStatus(`Authentication error: ${getUrlParameter('error_description') || error}`, 'error');
            } else if (code) {
                // We have a code, exchange it for a token
                exchangeCodeForToken(code);
            } else {
                // No code or error, might be a direct visit
                updateStatus('No authentication code found. Please go back and try again.', 'error');
            }
        });
    </script>
</body>
</html>
